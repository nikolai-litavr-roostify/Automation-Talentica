<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="0" total="171" passed="168">
  <reporter-output>
  </reporter-output>
  <suite name="All Test Suite" duration-ms="589078" started-at="2019-08-01T07:16:10Z" finished-at="2019-08-01T07:25:59Z">
    <groups>
    </groups>
    <test name="AccountCheck" duration-ms="14637" started-at="2019-08-01T07:16:10Z" finished-at="2019-08-01T07:16:24Z">
      <class name="accCheck.AccountCheckTests">
        <test-method status="PASS" signature="getHostURL()[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="getHostURL" is-config="true" duration-ms="620" started-at="2019-08-01T07:16:10Z" finished-at="2019-08-01T07:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getHostURL -->
        <test-method status="PASS" signature="accCheck_Valild_AccountChek_Flow_with_only_mandatory_parameters()[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Valild_AccountChek_Flow_with_only_mandatory_parameters" duration-ms="5839" started-at="2019-08-01T07:16:10Z" description="Valild Account Check Flow with only mandatory parameters and Sharing Accounts of two different banks" finished-at="2019-08-01T07:16:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Valild_AccountChek_Flow_with_only_mandatory_parameters -->
        <test-method status="PASS" signature="accCheck_Valild_AccountChek_Flow_with_all_parameters()[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Valild_AccountChek_Flow_with_all_parameters" duration-ms="5861" started-at="2019-08-01T07:16:10Z" description="Valid scenario with all parameters and sharing Accounts of single bank" finished-at="2019-08-01T07:16:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Valild_AccountChek_Flow_with_all_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="4" started-at="2019-08-01T07:16:16Z" finished-at="2019-08-01T07:16:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Valild_AccountChek_Flow_with_only_mandatory_parameters status=SUCCESS method=AccountCheckTests.accCheck_Valild_AccountChek_Flow_with_only_mandatory_parameters()[pri:0, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="2" started-at="2019-08-01T07:16:16Z" finished-at="2019-08-01T07:16:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Valild_AccountChek_Flow_with_all_parameters status=SUCCESS method=AccountCheckTests.accCheck_Valild_AccountChek_Flow_with_all_parameters()[pri:0, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Null_Address_line_1()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_Address_line_1" duration-ms="2082" started-at="2019-08-01T07:16:16Z" description="Null Address line 1" finished-at="2019-08-01T07:16:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_Address_line_1 -->
        <test-method status="PASS" signature="accCheck_Null_First_Name()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_First_Name" duration-ms="1936" started-at="2019-08-01T07:16:16Z" description="Null First Name" finished-at="2019-08-01T07:16:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_First_Name -->
        <test-method status="PASS" signature="accCheck_Null_Zip_Code()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_Zip_Code" duration-ms="2013" started-at="2019-08-01T07:16:16Z" description="Null Zip Code and Sharing only one of the two accounts of single bank" finished-at="2019-08-01T07:16:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_Zip_Code -->
        <test-method status="PASS" signature="accCheck_Null_SSN()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_SSN" duration-ms="1626" started-at="2019-08-01T07:16:16Z" description="Null SSN" finished-at="2019-08-01T07:16:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_SSN -->
        <test-method status="PASS" signature="accCheck_Null_Last_Name()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_Last_Name" duration-ms="2135" started-at="2019-08-01T07:16:16Z" description="Null Last Name" finished-at="2019-08-01T07:16:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_Last_Name -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:18Z" finished-at="2019-08-01T07:16:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_SSN status=SUCCESS method=AccountCheckTests.accCheck_Null_SSN()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Null_account_id()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_account_id" duration-ms="1253" started-at="2019-08-01T07:16:18Z" description="Null account id" finished-at="2019-08-01T07:16:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_account_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="2" started-at="2019-08-01T07:16:18Z" finished-at="2019-08-01T07:16:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_First_Name status=SUCCESS method=AccountCheckTests.accCheck_Null_First_Name()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Null_cust_id_and_ac_id()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_cust_id_and_ac_id" duration-ms="1167" started-at="2019-08-01T07:16:18Z" description="Null cust id and ac id" finished-at="2019-08-01T07:16:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_cust_id_and_ac_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:18Z" finished-at="2019-08-01T07:16:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_Zip_Code status=SUCCESS method=AccountCheckTests.accCheck_Null_Zip_Code()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Null_customer_id()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_customer_id" duration-ms="1171" started-at="2019-08-01T07:16:18Z" description="Null customer id" finished-at="2019-08-01T07:16:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_customer_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:18Z" finished-at="2019-08-01T07:16:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_Address_line_1 status=SUCCESS method=AccountCheckTests.accCheck_Null_Address_line_1()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Null_email_address()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_email_address" duration-ms="1200" started-at="2019-08-01T07:16:18Z" description="Null email address" finished-at="2019-08-01T07:16:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_email_address -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:18Z" finished-at="2019-08-01T07:16:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_Last_Name status=SUCCESS method=AccountCheckTests.accCheck_Null_Last_Name()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Null_first_name_last_name_ssn_email_verification_type()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_first_name_last_name_ssn_email_verification_type" duration-ms="1218" started-at="2019-08-01T07:16:18Z" description="Null first name last name ssn email verification type" finished-at="2019-08-01T07:16:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_first_name_last_name_ssn_email_verification_type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:19Z" finished-at="2019-08-01T07:16:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_account_id status=SUCCESS method=AccountCheckTests.accCheck_Null_account_id()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Null_verification_type()[pri:1, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Null_verification_type" duration-ms="1204" started-at="2019-08-01T07:16:19Z" description="Null verification type" finished-at="2019-08-01T07:16:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Null_verification_type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:19Z" finished-at="2019-08-01T07:16:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_cust_id_and_ac_id status=SUCCESS method=AccountCheckTests.accCheck_Null_cust_id_and_ac_id()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:19Z" finished-at="2019-08-01T07:16:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_customer_id status=SUCCESS method=AccountCheckTests.accCheck_Null_customer_id()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:19Z" finished-at="2019-08-01T07:16:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_email_address status=SUCCESS method=AccountCheckTests.accCheck_Null_email_address()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:20Z" finished-at="2019-08-01T07:16:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_first_name_last_name_ssn_email_verification_type status=SUCCESS method=AccountCheckTests.accCheck_Null_first_name_last_name_ssn_email_verification_type()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:20Z" finished-at="2019-08-01T07:16:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Null_verification_type status=SUCCESS method=AccountCheckTests.accCheck_Null_verification_type()[pri:1, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Invalid_Zip_Code()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_Zip_Code" duration-ms="1218" started-at="2019-08-01T07:16:20Z" description="Invalid Zip Code" finished-at="2019-08-01T07:16:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_Zip_Code -->
        <test-method status="PASS" signature="accCheck_Invalid_customer_id()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_customer_id" duration-ms="1312" started-at="2019-08-01T07:16:20Z" description="Invalid customer id" finished-at="2019-08-01T07:16:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_customer_id -->
        <test-method status="PASS" signature="accCheck_Invalid_email_address1()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_email_address1" duration-ms="1256" started-at="2019-08-01T07:16:20Z" description="Invalid email address1" finished-at="2019-08-01T07:16:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_email_address1 -->
        <test-method status="PASS" signature="accCheck_Invalid_account_id()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_account_id" duration-ms="1382" started-at="2019-08-01T07:16:20Z" description="Invalid account id" finished-at="2019-08-01T07:16:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_account_id -->
        <test-method status="PASS" signature="accCheck_Invalid_email_address2()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_email_address2" duration-ms="1343" started-at="2019-08-01T07:16:20Z" description="Invalid email address2" finished-at="2019-08-01T07:16:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_email_address2 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:21Z" finished-at="2019-08-01T07:16:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_Zip_Code status=SUCCESS method=AccountCheckTests.accCheck_Invalid_Zip_Code()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Invalid_email_address3()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_email_address3" duration-ms="1407" started-at="2019-08-01T07:16:21Z" description="Invalid email address3" finished-at="2019-08-01T07:16:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_email_address3 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:22Z" finished-at="2019-08-01T07:16:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_email_address1 status=SUCCESS method=AccountCheckTests.accCheck_Invalid_email_address1()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Invalid_email_address4()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_email_address4" duration-ms="1401" started-at="2019-08-01T07:16:22Z" description="Invalid email address4" finished-at="2019-08-01T07:16:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_email_address4 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:22Z" finished-at="2019-08-01T07:16:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_customer_id status=SUCCESS method=AccountCheckTests.accCheck_Invalid_customer_id()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Invalid_email_address5()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_email_address5" duration-ms="1381" started-at="2019-08-01T07:16:22Z" description="Invalid email address5" finished-at="2019-08-01T07:16:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_email_address5 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:22Z" finished-at="2019-08-01T07:16:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_account_id status=SUCCESS method=AccountCheckTests.accCheck_Invalid_account_id()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_Invalid_verification_type()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_Invalid_verification_type" duration-ms="1340" started-at="2019-08-01T07:16:22Z" description="Invalid verification type" finished-at="2019-08-01T07:16:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_Invalid_verification_type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:22Z" finished-at="2019-08-01T07:16:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_email_address2 status=SUCCESS method=AccountCheckTests.accCheck_Invalid_email_address2()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_SSN_greater_than_9_digits()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_SSN_greater_than_9_digits" duration-ms="1286" started-at="2019-08-01T07:16:22Z" description="SSN greater than 9 digits" finished-at="2019-08-01T07:16:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_SSN_greater_than_9_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:23Z" finished-at="2019-08-01T07:16:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_email_address3 status=SUCCESS method=AccountCheckTests.accCheck_Invalid_email_address3()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_SSN_less_than_9_digits()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_SSN_less_than_9_digits" duration-ms="1163" started-at="2019-08-01T07:16:23Z" description="SSN less than 9 digits" finished-at="2019-08-01T07:16:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_SSN_less_than_9_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="18" started-at="2019-08-01T07:16:23Z" finished-at="2019-08-01T07:16:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_email_address4 status=SUCCESS method=AccountCheckTests.accCheck_Invalid_email_address4()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="accCheck_zip_code_less_than_5_digits_ssn_less_than_9_null_fist_and_last_name_invalid_email()[pri:2, instance:accCheck.AccountCheckTests@132ddbab]" name="accCheck_zip_code_less_than_5_digits_ssn_less_than_9_null_fist_and_last_name_invalid_email" duration-ms="1191" started-at="2019-08-01T07:16:23Z" description="zip code less than 5 digits ssn less than 9 null fist and last name invalid email" finished-at="2019-08-01T07:16:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accCheck_zip_code_less_than_5_digits_ssn_less_than_9_null_fist_and_last_name_invalid_email -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:23Z" finished-at="2019-08-01T07:16:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_email_address5 status=SUCCESS method=AccountCheckTests.accCheck_Invalid_email_address5()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:23Z" finished-at="2019-08-01T07:16:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_Invalid_verification_type status=SUCCESS method=AccountCheckTests.accCheck_Invalid_verification_type()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:23Z" finished-at="2019-08-01T07:16:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_SSN_greater_than_9_digits status=SUCCESS method=AccountCheckTests.accCheck_SSN_greater_than_9_digits()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:24Z" finished-at="2019-08-01T07:16:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_SSN_less_than_9_digits status=SUCCESS method=AccountCheckTests.accCheck_SSN_less_than_9_digits()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:accCheck.AccountCheckTests@132ddbab]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:24Z" finished-at="2019-08-01T07:16:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accCheck_zip_code_less_than_5_digits_ssn_less_than_9_null_fist_and_last_name_invalid_email status=SUCCESS method=AccountCheckTests.accCheck_zip_code_less_than_5_digits_ssn_less_than_9_null_fist_and_last_name_invalid_email()[pri:2, instance:accCheck.AccountCheckTests@132ddbab] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
      </class> <!-- accCheck.AccountCheckTests -->
    </test> <!-- AccountCheck -->
    <test name="Finicity" duration-ms="316195" started-at="2019-08-01T07:16:25Z" finished-at="2019-08-01T07:21:41Z">
      <class name="finicity.FinicityTests">
        <test-method status="PASS" signature="getData()[pri:0, instance:finicity.FinicityTests@77192705]" name="getData" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:25Z" finished-at="2019-08-01T07:16:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getData -->
        <test-method status="FAIL" signature="Valid_Finicity_flow_for_Asset_Income_Verification_With_all_parameters()[pri:0, instance:finicity.FinicityTests@77192705]" name="Valid_Finicity_flow_for_Asset_Income_Verification_With_all_parameters" duration-ms="1450" started-at="2019-08-01T07:16:25Z" description="Valid Finicity flow for Asset_Income Verification  (With all parameters)" finished-at="2019-08-01T07:16:26Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <500>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:238)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:483)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$2.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:655)
at sun.reflect.GeneratedMethodAccessor135.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:123)
at io.restassured.specification.ResponseSpecification$statusCode$1.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:131)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at finicity.FinicityTests.Valid_Finicity_flow_for_Asset_Income_Verification_With_all_parameters(FinicityTests.java:122)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Finicity_flow_for_Asset_Income_Verification_With_all_parameters -->
        <test-method status="FAIL" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:16:26Z" finished-at="2019-08-01T07:16:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Finicity_flow_for_Asset_Income_Verification_With_all_parameters status=FAILURE method=FinicityTests.Valid_Finicity_flow_for_Asset_Income_Verification_With_all_parameters()[pri:0, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at finicity.FinicityTests.checkStatus(FinicityTests.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:455)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valid_Finicity_flow_for_Asset_Income_Verification_With_only_mandatory_parameters()[pri:0, instance:finicity.FinicityTests@77192705]" name="Valid_Finicity_flow_for_Asset_Income_Verification_With_only_mandatory_parameters" duration-ms="6336" started-at="2019-08-01T07:16:26Z" description="Valid Finicity flow for Asset_Income Verification  (With only mandatory parameters)" finished-at="2019-08-01T07:16:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Finicity_flow_for_Asset_Income_Verification_With_only_mandatory_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:16:33Z" finished-at="2019-08-01T07:16:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Finicity_flow_for_Asset_Income_Verification_With_only_mandatory_parameters status=SUCCESS method=FinicityTests.Valid_Finicity_flow_for_Asset_Income_Verification_With_only_mandatory_parameters()[pri:0, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valid_Finicity_flow_for_Asset_Verification_With_all_parameters()[pri:0, instance:finicity.FinicityTests@77192705]" name="Valid_Finicity_flow_for_Asset_Verification_With_all_parameters" duration-ms="122983" started-at="2019-08-01T07:16:33Z" description="Valid Finicity flow for Asset Verification (With all parameters)" finished-at="2019-08-01T07:18:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Finicity_flow_for_Asset_Verification_With_all_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:18:36Z" finished-at="2019-08-01T07:18:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Finicity_flow_for_Asset_Verification_With_all_parameters status=SUCCESS method=FinicityTests.Valid_Finicity_flow_for_Asset_Verification_With_all_parameters()[pri:0, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valid_Finicity_flow_for_Asset_Verification_With_only_mandatory_parameters()[pri:0, instance:finicity.FinicityTests@77192705]" name="Valid_Finicity_flow_for_Asset_Verification_With_only_mandatory_parameters" duration-ms="5998" started-at="2019-08-01T07:18:36Z" description="Valid Finicity flow for Asset Verification (With only mandatory parameters)" finished-at="2019-08-01T07:18:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Finicity_flow_for_Asset_Verification_With_only_mandatory_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:18:42Z" finished-at="2019-08-01T07:18:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Finicity_flow_for_Asset_Verification_With_only_mandatory_parameters status=SUCCESS method=FinicityTests.Valid_Finicity_flow_for_Asset_Verification_With_only_mandatory_parameters()[pri:0, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valid_Finicity_flow_for_Income_Verification_With_all_parameters()[pri:0, instance:finicity.FinicityTests@77192705]" name="Valid_Finicity_flow_for_Income_Verification_With_all_parameters" duration-ms="118244" started-at="2019-08-01T07:18:42Z" description="Valid Finicity flow for Income Verification (With all parameters)" finished-at="2019-08-01T07:20:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Finicity_flow_for_Income_Verification_With_all_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:20:40Z" finished-at="2019-08-01T07:20:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Finicity_flow_for_Income_Verification_With_all_parameters status=SUCCESS method=FinicityTests.Valid_Finicity_flow_for_Income_Verification_With_all_parameters()[pri:0, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valid_Finicity_flow_for_Income_Verification_With_only_mandatory_parameters()[pri:0, instance:finicity.FinicityTests@77192705]" name="Valid_Finicity_flow_for_Income_Verification_With_only_mandatory_parameters" duration-ms="9617" started-at="2019-08-01T07:20:40Z" description="Valid Finicity flow for Income Verification (With only mandatory parameters)" finished-at="2019-08-01T07:20:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Finicity_flow_for_Income_Verification_With_only_mandatory_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:20:49Z" finished-at="2019-08-01T07:20:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Finicity_flow_for_Income_Verification_With_only_mandatory_parameters status=SUCCESS method=FinicityTests.Valid_Finicity_flow_for_Income_Verification_With_only_mandatory_parameters()[pri:0, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Account_ID()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_Account_ID" duration-ms="1200" started-at="2019-08-01T07:20:49Z" description="Null Account ID" finished-at="2019-08-01T07:20:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Account_ID -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:20:51Z" finished-at="2019-08-01T07:20:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Account_ID status=SUCCESS method=FinicityTests.Null_Account_ID()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_City()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_City" duration-ms="1288" started-at="2019-08-01T07:20:51Z" description="Null City" finished-at="2019-08-01T07:20:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_City -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:20:52Z" finished-at="2019-08-01T07:20:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_City status=SUCCESS method=FinicityTests.Null_City()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_First_Name()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_First_Name" duration-ms="1187" started-at="2019-08-01T07:20:52Z" description="Null First Name" finished-at="2019-08-01T07:20:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_First_Name -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:20:53Z" finished-at="2019-08-01T07:20:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_First_Name status=SUCCESS method=FinicityTests.Null_First_Name()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Last_Name()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_Last_Name" duration-ms="1181" started-at="2019-08-01T07:20:53Z" description="Null Last Name" finished-at="2019-08-01T07:20:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Last_Name -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:20:54Z" finished-at="2019-08-01T07:20:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Last_Name status=SUCCESS method=FinicityTests.Null_Last_Name()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Phone_number()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_Phone_number" duration-ms="1228" started-at="2019-08-01T07:20:54Z" description="Null Phone number" finished-at="2019-08-01T07:20:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Phone_number -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:20:56Z" finished-at="2019-08-01T07:20:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Phone_number status=SUCCESS method=FinicityTests.Null_Phone_number()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_SSN()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_SSN" duration-ms="1279" started-at="2019-08-01T07:20:56Z" description="Null SSN" finished-at="2019-08-01T07:20:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_SSN -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:20:57Z" finished-at="2019-08-01T07:20:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_SSN status=SUCCESS method=FinicityTests.Null_SSN()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_State()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_State" duration-ms="1240" started-at="2019-08-01T07:20:57Z" description="Null State" finished-at="2019-08-01T07:20:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_State -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:20:58Z" finished-at="2019-08-01T07:20:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_State status=SUCCESS method=FinicityTests.Null_State()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Username()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_Username" duration-ms="3552" started-at="2019-08-01T07:20:58Z" description="Null Username" finished-at="2019-08-01T07:21:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Username -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:02Z" finished-at="2019-08-01T07:21:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Username status=SUCCESS method=FinicityTests.Null_Username()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Verification_Type()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_Verification_Type" duration-ms="1219" started-at="2019-08-01T07:21:02Z" description="Null Verification Type" finished-at="2019-08-01T07:21:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Verification_Type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:03Z" finished-at="2019-08-01T07:21:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Verification_Type status=SUCCESS method=FinicityTests.Null_Verification_Type()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Zip_code()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_Zip_code" duration-ms="1277" started-at="2019-08-01T07:21:03Z" description="Null Zip code" finished-at="2019-08-01T07:21:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Zip_code -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:04Z" finished-at="2019-08-01T07:21:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Zip_code status=SUCCESS method=FinicityTests.Null_Zip_code()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_both_address_lines()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_both_address_lines" duration-ms="1272" started-at="2019-08-01T07:21:04Z" description="Null both address lines" finished-at="2019-08-01T07:21:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_both_address_lines -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:05Z" finished-at="2019-08-01T07:21:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_both_address_lines status=SUCCESS method=FinicityTests.Null_both_address_lines()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_cust_id_and_ac_id()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_cust_id_and_ac_id" duration-ms="1190" started-at="2019-08-01T07:21:05Z" description="Null Customer ID and Account ID" finished-at="2019-08-01T07:21:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_cust_id_and_ac_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:07Z" finished-at="2019-08-01T07:21:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_cust_id_and_ac_id status=SUCCESS method=FinicityTests.Null_cust_id_and_ac_id()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_dob()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_dob" duration-ms="1282" started-at="2019-08-01T07:21:07Z" description="Null DOB" finished-at="2019-08-01T07:21:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_dob -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:08Z" finished-at="2019-08-01T07:21:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_dob status=SUCCESS method=FinicityTests.Null_dob()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_first_last_ssn_dob_both_add_lines_city_state_zip_phone()[pri:1, instance:finicity.FinicityTests@77192705]" name="Null_first_last_ssn_dob_both_add_lines_city_state_zip_phone" duration-ms="1139" started-at="2019-08-01T07:21:08Z" description="Null first , last, ssn, dob, both add lines, city, state, zip, phone" finished-at="2019-08-01T07:21:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_first_last_ssn_dob_both_add_lines_city_state_zip_phone -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:09Z" finished-at="2019-08-01T07:21:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_first_last_ssn_dob_both_add_lines_city_state_zip_phone status=SUCCESS method=FinicityTests.Null_first_last_ssn_dob_both_add_lines_city_state_zip_phone()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="With_Address_line_1_only_Null_Address_line_2()[pri:1, instance:finicity.FinicityTests@77192705]" name="With_Address_line_1_only_Null_Address_line_2" duration-ms="3545" started-at="2019-08-01T07:21:09Z" description="With Address line 1 only (Null Address line 2)" finished-at="2019-08-01T07:21:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- With_Address_line_1_only_Null_Address_line_2 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:13Z" finished-at="2019-08-01T07:21:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=With_Address_line_1_only_Null_Address_line_2 status=SUCCESS method=FinicityTests.With_Address_line_1_only_Null_Address_line_2()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="With_Address_line_2_only_Null_Address_line_1()[pri:1, instance:finicity.FinicityTests@77192705]" name="With_Address_line_2_only_Null_Address_line_1" duration-ms="4545" started-at="2019-08-01T07:21:13Z" description="With Address line 2 only (Null Address line 1)" finished-at="2019-08-01T07:21:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- With_Address_line_2_only_Null_Address_line_1 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:17Z" finished-at="2019-08-01T07:21:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=With_Address_line_2_only_Null_Address_line_1 status=SUCCESS method=FinicityTests.With_Address_line_2_only_Null_Address_line_1()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="null_email_address()[pri:1, instance:finicity.FinicityTests@77192705]" name="null_email_address" duration-ms="1287" started-at="2019-08-01T07:21:17Z" description="Null Email Address" finished-at="2019-08-01T07:21:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- null_email_address -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:18Z" finished-at="2019-08-01T07:21:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=null_email_address status=SUCCESS method=FinicityTests.null_email_address()[pri:1, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Account_ID()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_Account_ID" duration-ms="1268" started-at="2019-08-01T07:21:18Z" description="Invalid Account ID" finished-at="2019-08-01T07:21:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Account_ID -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:20Z" finished-at="2019-08-01T07:21:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Account_ID status=SUCCESS method=FinicityTests.Invalid_Account_ID()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Customer_ID()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_Customer_ID" duration-ms="1201" started-at="2019-08-01T07:21:20Z" description="Invalid Customer ID" finished-at="2019-08-01T07:21:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Customer_ID -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:21Z" finished-at="2019-08-01T07:21:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Customer_ID status=SUCCESS method=FinicityTests.Invalid_Customer_ID()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_cust_id_ac_id()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_cust_id_ac_id" duration-ms="1201" started-at="2019-08-01T07:21:21Z" description="Invalid Cuatomer ID and Account ID" finished-at="2019-08-01T07:21:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_cust_id_ac_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:22Z" finished-at="2019-08-01T07:21:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_cust_id_ac_id status=SUCCESS method=FinicityTests.Invalid_cust_id_ac_id()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_dob_DD_MM_YY()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_dob_DD_MM_YY" duration-ms="1137" started-at="2019-08-01T07:21:22Z" description="Invalid dob (DD/MM/YY)" finished-at="2019-08-01T07:21:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_dob_DD_MM_YY -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:23Z" finished-at="2019-08-01T07:21:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_dob_DD_MM_YY status=SUCCESS method=FinicityTests.Invalid_dob_DD_MM_YY()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_dob_DD_MM_YYYY()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_dob_DD_MM_YYYY" duration-ms="1197" started-at="2019-08-01T07:21:23Z" description="Invalid dob (DD/MM/YYYY)" finished-at="2019-08-01T07:21:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_dob_DD_MM_YYYY -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:24Z" finished-at="2019-08-01T07:21:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_dob_DD_MM_YYYY status=SUCCESS method=FinicityTests.Invalid_dob_DD_MM_YYYY()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_dob_MM_YYYY_DD()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_dob_MM_YYYY_DD" duration-ms="1190" started-at="2019-08-01T07:21:24Z" description="Invalid dob (MM/YYYY/DD)" finished-at="2019-08-01T07:21:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_dob_MM_YYYY_DD -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:26Z" finished-at="2019-08-01T07:21:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_dob_MM_YYYY_DD status=SUCCESS method=FinicityTests.Invalid_dob_MM_YYYY_DD()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_dob_YYYY_DD_MM()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_dob_YYYY_DD_MM" duration-ms="1142" started-at="2019-08-01T07:21:26Z" description="Invalid dob (YYYY/DD/MM)" finished-at="2019-08-01T07:21:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_dob_YYYY_DD_MM -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:27Z" finished-at="2019-08-01T07:21:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_dob_YYYY_DD_MM status=SUCCESS method=FinicityTests.Invalid_dob_YYYY_DD_MM()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_dob_both_add_lines_null_city_state_zip_code_less_than_5_ssn_less_than_9()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_dob_both_add_lines_null_city_state_zip_code_less_than_5_ssn_less_than_9" duration-ms="1136" started-at="2019-08-01T07:21:27Z" description="Invalid dob, both add lines, null city, state, zip code less than 5, ssn less than 9" finished-at="2019-08-01T07:21:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_dob_both_add_lines_null_city_state_zip_code_less_than_5_ssn_less_than_9 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:28Z" finished-at="2019-08-01T07:21:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_dob_both_add_lines_null_city_state_zip_code_less_than_5_ssn_less_than_9 status=SUCCESS method=FinicityTests.Invalid_dob_both_add_lines_null_city_state_zip_code_less_than_5_ssn_less_than_9()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address1()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_email_address1" duration-ms="1163" started-at="2019-08-01T07:21:28Z" description="Invalid email address1" finished-at="2019-08-01T07:21:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address1 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:29Z" finished-at="2019-08-01T07:21:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address1 status=SUCCESS method=FinicityTests.Invalid_email_address1()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address2()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_email_address2" duration-ms="1181" started-at="2019-08-01T07:21:29Z" description="Invalid email address2" finished-at="2019-08-01T07:21:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address2 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:30Z" finished-at="2019-08-01T07:21:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address2 status=SUCCESS method=FinicityTests.Invalid_email_address2()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address3()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_email_address3" duration-ms="1179" started-at="2019-08-01T07:21:30Z" description="Invalid email address3" finished-at="2019-08-01T07:21:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address3 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:31Z" finished-at="2019-08-01T07:21:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address3 status=SUCCESS method=FinicityTests.Invalid_email_address3()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address4()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_email_address4" duration-ms="1137" started-at="2019-08-01T07:21:31Z" description="Invalid email address4" finished-at="2019-08-01T07:21:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address4 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:33Z" finished-at="2019-08-01T07:21:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address4 status=SUCCESS method=FinicityTests.Invalid_email_address4()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address5()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalid_email_address5" duration-ms="1201" started-at="2019-08-01T07:21:33Z" description="Invalid email address5" finished-at="2019-08-01T07:21:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address5 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:34Z" finished-at="2019-08-01T07:21:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address5 status=SUCCESS method=FinicityTests.Invalid_email_address5()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalild_Verification_Type()[pri:2, instance:finicity.FinicityTests@77192705]" name="Invalild_Verification_Type" duration-ms="1218" started-at="2019-08-01T07:21:34Z" description="Invalild Verification Type" finished-at="2019-08-01T07:21:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalild_Verification_Type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:35Z" finished-at="2019-08-01T07:21:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalild_Verification_Type status=SUCCESS method=FinicityTests.Invalild_Verification_Type()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="SSN_greater_than_9_digits()[pri:2, instance:finicity.FinicityTests@77192705]" name="SSN_greater_than_9_digits" duration-ms="1180" started-at="2019-08-01T07:21:35Z" description="SSN greater than 9 digits" finished-at="2019-08-01T07:21:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SSN_greater_than_9_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:36Z" finished-at="2019-08-01T07:21:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SSN_greater_than_9_digits status=SUCCESS method=FinicityTests.SSN_greater_than_9_digits()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="SSN_less_than_9_digits()[pri:2, instance:finicity.FinicityTests@77192705]" name="SSN_less_than_9_digits" duration-ms="1154" started-at="2019-08-01T07:21:36Z" description="SSN less than 9 digits" finished-at="2019-08-01T07:21:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SSN_less_than_9_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:37Z" finished-at="2019-08-01T07:21:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SSN_less_than_9_digits status=SUCCESS method=FinicityTests.SSN_less_than_9_digits()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Username_less_than_6_characters()[pri:2, instance:finicity.FinicityTests@77192705]" name="Username_less_than_6_characters" duration-ms="1224" started-at="2019-08-01T07:21:37Z" description="Username less than 6 characters" finished-at="2019-08-01T07:21:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Username_less_than_6_characters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:39Z" finished-at="2019-08-01T07:21:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Username_less_than_6_characters status=SUCCESS method=FinicityTests.Username_less_than_6_characters()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Zip_code_greater_than_5_digits()[pri:2, instance:finicity.FinicityTests@77192705]" name="Zip_code_greater_than_5_digits" duration-ms="1138" started-at="2019-08-01T07:21:39Z" description="Zip code greater than 5 digits" finished-at="2019-08-01T07:21:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Zip_code_greater_than_5_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:40Z" finished-at="2019-08-01T07:21:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Zip_code_greater_than_5_digits status=SUCCESS method=FinicityTests.Zip_code_greater_than_5_digits()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Zip_code_less_than_5_digits()[pri:2, instance:finicity.FinicityTests@77192705]" name="Zip_code_less_than_5_digits" duration-ms="1212" started-at="2019-08-01T07:21:40Z" description="Zip code less than 5 digits" finished-at="2019-08-01T07:21:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Zip_code_less_than_5_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:finicity.FinicityTests@77192705]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:41Z" finished-at="2019-08-01T07:21:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Zip_code_less_than_5_digits status=SUCCESS method=FinicityTests.Zip_code_less_than_5_digits()[pri:2, instance:finicity.FinicityTests@77192705] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="FAIL" signature="downloadReport(java.lang.String)[pri:3, instance:finicity.FinicityTests@77192705]" name="downloadReport" duration-ms="0" started-at="2019-08-01T07:21:41Z" description="Download the report" finished-at="2019-08-01T07:21:41Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Cannot inject @Test annotated Method [downloadReport] with [class java.lang.String].
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Cannot inject @Test annotated Method [downloadReport] with [class java.lang.String].
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection
at org.testng.internal.Parameters.checkParameterTypes(Parameters.java:407)
at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:356)
at org.testng.internal.Parameters.createParameters(Parameters.java:635)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.ParameterHandler.handleParameters(ParameterHandler.java:49)
at org.testng.internal.ParameterHandler.createParameters(ParameterHandler.java:37)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:923)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- downloadReport -->
      </class> <!-- finicity.FinicityTests -->
    </test> <!-- Finicity -->
    <test name="Zillow" duration-ms="69215" started-at="2019-08-01T07:21:41Z" finished-at="2019-08-01T07:22:50Z">
      <class name="zillow.ZillowTests">
        <test-method status="PASS" signature="getData()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="getData" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:41Z" finished-at="2019-08-01T07:21:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getData -->
        <test-method status="PASS" signature="Valid_Zillow_Flow_with_Address_Line_2_with_city_state_null()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="Valid_Zillow_Flow_with_Address_Line_2_with_city_state_null" duration-ms="1540" started-at="2019-08-01T07:21:41Z" description="Valid Zillow Flow (with Address Line 2) with city+state null" finished-at="2019-08-01T07:21:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Zillow_Flow_with_Address_Line_2_with_city_state_null -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:21:43Z" finished-at="2019-08-01T07:21:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Zillow_Flow_with_Address_Line_2_with_city_state_null status=SUCCESS method=ZillowTests.Valid_Zillow_Flow_with_Address_Line_2_with_city_state_null()[pri:0, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valid_Zillow_Flow_with_Address_Line_2_with_zip_null()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="Valid_Zillow_Flow_with_Address_Line_2_with_zip_null" duration-ms="1484" started-at="2019-08-01T07:21:43Z" description="Valid Zillow Flow (with Address Line 2) with zip null" finished-at="2019-08-01T07:21:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Zillow_Flow_with_Address_Line_2_with_zip_null -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:44Z" finished-at="2019-08-01T07:21:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Zillow_Flow_with_Address_Line_2_with_zip_null status=SUCCESS method=ZillowTests.Valid_Zillow_Flow_with_Address_Line_2_with_zip_null()[pri:0, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valid_Zillow_Flow_with_City_State_Combination()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="Valid_Zillow_Flow_with_City_State_Combination" duration-ms="1513" started-at="2019-08-01T07:21:44Z" description="Valid Zillow Flow (with City+State Combination)" finished-at="2019-08-01T07:21:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valid_Zillow_Flow_with_City_State_Combination -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:21:46Z" finished-at="2019-08-01T07:21:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valid_Zillow_Flow_with_City_State_Combination status=SUCCESS method=ZillowTests.Valid_Zillow_Flow_with_City_State_Combination()[pri:0, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valild_Zillow_Flow_with_City_State_Zip_Combination()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="Valild_Zillow_Flow_with_City_State_Zip_Combination" duration-ms="27835" started-at="2019-08-01T07:21:46Z" description="Valild Zillow Flow (with City+State+Zip Combination)" finished-at="2019-08-01T07:22:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valild_Zillow_Flow_with_City_State_Zip_Combination -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:14Z" finished-at="2019-08-01T07:22:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valild_Zillow_Flow_with_City_State_Zip_Combination status=SUCCESS method=ZillowTests.Valild_Zillow_Flow_with_City_State_Zip_Combination()[pri:0, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valild_Zillow_Flow_with_City_State_Zip_Combination_Zip_code_starting_with_zero()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="Valild_Zillow_Flow_with_City_State_Zip_Combination_Zip_code_starting_with_zero" duration-ms="1567" started-at="2019-08-01T07:22:14Z" description="Valild Zillow Flow (with City+State+Zip Combination) Zip code starting with zero" finished-at="2019-08-01T07:22:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valild_Zillow_Flow_with_City_State_Zip_Combination_Zip_code_starting_with_zero -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:15Z" finished-at="2019-08-01T07:22:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valild_Zillow_Flow_with_City_State_Zip_Combination_Zip_code_starting_with_zero status=SUCCESS method=ZillowTests.Valild_Zillow_Flow_with_City_State_Zip_Combination_Zip_code_starting_with_zero()[pri:0, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valild_Zillow_Flow_with_Zip()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="Valild_Zillow_Flow_with_Zip" duration-ms="1517" started-at="2019-08-01T07:22:15Z" description="Valild Zillow Flow (with Zip)" finished-at="2019-08-01T07:22:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valild_Zillow_Flow_with_Zip -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:17Z" finished-at="2019-08-01T07:22:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valild_Zillow_Flow_with_Zip status=SUCCESS method=ZillowTests.Valild_Zillow_Flow_with_Zip()[pri:0, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valild_Zillow_Flow_with_Zip_starting_with_zero()[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="Valild_Zillow_Flow_with_Zip_starting_with_zero" duration-ms="1502" started-at="2019-08-01T07:22:17Z" description="Valild Zillow Flow (with Zip starting with zero)" finished-at="2019-08-01T07:22:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valild_Zillow_Flow_with_Zip_starting_with_zero -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:22:18Z" finished-at="2019-08-01T07:22:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valild_Zillow_Flow_with_Zip_starting_with_zero status=SUCCESS method=ZillowTests.Valild_Zillow_Flow_with_Zip_starting_with_zero()[pri:0, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Address_line_1_with_city_null_state()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Address_line_1_with_city_null_state" duration-ms="1257" started-at="2019-08-01T07:22:18Z" description="Address line 1 with city (null state)" finished-at="2019-08-01T07:22:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Address_line_1_with_city_null_state -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:19Z" finished-at="2019-08-01T07:22:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Address_line_1_with_city_null_state status=SUCCESS method=ZillowTests.Address_line_1_with_city_null_state()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Address_line_1_with_city_with_empty_state_and_null_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Address_line_1_with_city_with_empty_state_and_null_zip" duration-ms="1565" started-at="2019-08-01T07:22:19Z" description="Address line 1 with city (with empty state and null zip)" finished-at="2019-08-01T07:22:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Address_line_1_with_city_with_empty_state_and_null_zip -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:22:21Z" finished-at="2019-08-01T07:22:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Address_line_1_with_city_with_empty_state_and_null_zip status=SUCCESS method=ZillowTests.Address_line_1_with_city_with_empty_state_and_null_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Address_line_1_with_null_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Address_line_1_with_null_zip" duration-ms="1242" started-at="2019-08-01T07:22:21Z" description="Address line 1 with null zip" finished-at="2019-08-01T07:22:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Address_line_1_with_null_zip -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:22Z" finished-at="2019-08-01T07:22:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Address_line_1_with_null_zip status=SUCCESS method=ZillowTests.Address_line_1_with_null_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Address_line_1_with_state_null_city()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Address_line_1_with_state_null_city" duration-ms="1246" started-at="2019-08-01T07:22:22Z" description="Address line 1 with state (null city)" finished-at="2019-08-01T07:22:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Address_line_1_with_state_null_city -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:23Z" finished-at="2019-08-01T07:22:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Address_line_1_with_state_null_city status=SUCCESS method=ZillowTests.Address_line_1_with_state_null_city()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Address_line_1_with_state_with_empty_city_and_null_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Address_line_1_with_state_with_empty_city_and_null_zip" duration-ms="1516" started-at="2019-08-01T07:22:23Z" description="Address line 1 with state (with empty city and null zip)" finished-at="2019-08-01T07:22:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Address_line_1_with_state_with_empty_city_and_null_zip -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:22:25Z" finished-at="2019-08-01T07:22:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Address_line_1_with_state_with_empty_city_and_null_zip status=SUCCESS method=ZillowTests.Address_line_1_with_state_with_empty_city_and_null_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Address_Line1()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Null_Address_Line1" duration-ms="1201" started-at="2019-08-01T07:22:25Z" description="Null Address Line1" finished-at="2019-08-01T07:22:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Address_Line1 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:26Z" finished-at="2019-08-01T07:22:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Address_Line1 status=SUCCESS method=ZillowTests.Null_Address_Line1()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_account_id()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Null_account_id" duration-ms="1143" started-at="2019-08-01T07:22:26Z" description="Null Account Id" finished-at="2019-08-01T07:22:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_account_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:27Z" finished-at="2019-08-01T07:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_account_id status=SUCCESS method=ZillowTests.Null_account_id()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_add_line_city_zip_code_state()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Null_add_line_city_zip_code_state" duration-ms="1254" started-at="2019-08-01T07:22:27Z" description="Null add line, city, zip code, state" finished-at="2019-08-01T07:22:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_add_line_city_zip_code_state -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:29Z" finished-at="2019-08-01T07:22:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_add_line_city_zip_code_state status=SUCCESS method=ZillowTests.Null_add_line_city_zip_code_state()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_cust_id_ac_id()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Null_cust_id_ac_id" duration-ms="1140" started-at="2019-08-01T07:22:29Z" description="Null Customer Id and Account Id" finished-at="2019-08-01T07:22:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_cust_id_ac_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:30Z" finished-at="2019-08-01T07:22:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_cust_id_ac_id status=SUCCESS method=ZillowTests.Null_cust_id_ac_id()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_customer_id()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Null_customer_id" duration-ms="1176" started-at="2019-08-01T07:22:30Z" description="Null Customer Id" finished-at="2019-08-01T07:22:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_customer_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:22:31Z" finished-at="2019-08-01T07:22:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_customer_id status=SUCCESS method=ZillowTests.Null_customer_id()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_verification_type()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="Null_verification_type" duration-ms="1134" started-at="2019-08-01T07:22:31Z" description="Null Verification Type" finished-at="2019-08-01T07:22:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_verification_type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:32Z" finished-at="2019-08-01T07:22:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_verification_type status=SUCCESS method=ZillowTests.Null_verification_type()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="With_address_line_2_and_city_state()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="With_address_line_2_and_city_state" duration-ms="1267" started-at="2019-08-01T07:22:32Z" description="With address line 2 and city+state (Null address line 1 and zip code)" finished-at="2019-08-01T07:22:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- With_address_line_2_and_city_state -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:22:33Z" finished-at="2019-08-01T07:22:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=With_address_line_2_and_city_state status=SUCCESS method=ZillowTests.With_address_line_2_and_city_state()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="With_address_line_2_and_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="With_address_line_2_and_zip" duration-ms="1247" started-at="2019-08-01T07:22:33Z" description="With address line 2 and zip (Null address line 1, city and state)" finished-at="2019-08-01T07:22:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- With_address_line_2_and_zip -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:35Z" finished-at="2019-08-01T07:22:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=With_address_line_2_and_zip status=SUCCESS method=ZillowTests.With_address_line_2_and_zip()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="With_only_address_line_1()[pri:1, instance:zillow.ZillowTests@5dbe30be]" name="With_only_address_line_1" duration-ms="1250" started-at="2019-08-01T07:22:35Z" description="With only address line 1 (Null address line 2)" finished-at="2019-08-01T07:22:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- With_only_address_line_1 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:36Z" finished-at="2019-08-01T07:22:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=With_only_address_line_1 status=SUCCESS method=ZillowTests.With_only_address_line_1()[pri:1, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Account_ID()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_Account_ID" duration-ms="1265" started-at="2019-08-01T07:22:36Z" description="Invalid Account ID" finished-at="2019-08-01T07:22:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Account_ID -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:37Z" finished-at="2019-08-01T07:22:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Account_ID status=SUCCESS method=ZillowTests.Invalid_Account_ID()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Address_Line1()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_Address_Line1" duration-ms="1600" started-at="2019-08-01T07:22:37Z" description="Invalid Address Line1" finished-at="2019-08-01T07:22:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Address_Line1 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:39Z" finished-at="2019-08-01T07:22:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Address_Line1 status=SUCCESS method=ZillowTests.Invalid_Address_Line1()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_City()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_City" duration-ms="1582" started-at="2019-08-01T07:22:39Z" description="Invalid City" finished-at="2019-08-01T07:22:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_City -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:40Z" finished-at="2019-08-01T07:22:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_City status=SUCCESS method=ZillowTests.Invalid_City()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_City_State_Combination_without_zip()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_City_State_Combination_without_zip" duration-ms="1610" started-at="2019-08-01T07:22:40Z" description="Invalid City + State Combination without zip" finished-at="2019-08-01T07:22:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_City_State_Combination_without_zip -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:42Z" finished-at="2019-08-01T07:22:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_City_State_Combination_without_zip status=SUCCESS method=ZillowTests.Invalid_City_State_Combination_without_zip()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_City_State_Zip_Combination()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_City_State_Zip_Combination" duration-ms="1629" started-at="2019-08-01T07:22:42Z" description="Invalid City + State + Zip Combination " finished-at="2019-08-01T07:22:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_City_State_Zip_Combination -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:43Z" finished-at="2019-08-01T07:22:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_City_State_Zip_Combination status=SUCCESS method=ZillowTests.Invalid_City_State_Zip_Combination()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Customer_ID()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_Customer_ID" duration-ms="1202" started-at="2019-08-01T07:22:43Z" description="Invalid Customer ID" finished-at="2019-08-01T07:22:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Customer_ID -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:45Z" finished-at="2019-08-01T07:22:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Customer_ID status=SUCCESS method=ZillowTests.Invalid_Customer_ID()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_State()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_State" duration-ms="1436" started-at="2019-08-01T07:22:45Z" description="Invalid State" finished-at="2019-08-01T07:22:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_State -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:22:46Z" finished-at="2019-08-01T07:22:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_State status=SUCCESS method=ZillowTests.Invalid_State()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Verification_Type()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_Verification_Type" duration-ms="1243" started-at="2019-08-01T07:22:46Z" description="Invalid Verification Type" finished-at="2019-08-01T07:22:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Verification_Type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:47Z" finished-at="2019-08-01T07:22:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Verification_Type status=SUCCESS method=ZillowTests.Invalid_Verification_Type()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Zip()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_Zip" duration-ms="1719" started-at="2019-08-01T07:22:47Z" description="Invalid Zip" finished-at="2019-08-01T07:22:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Zip -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:22:49Z" finished-at="2019-08-01T07:22:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Zip status=SUCCESS method=ZillowTests.Invalid_Zip()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_ac_id_cust_id()[pri:2, instance:zillow.ZillowTests@5dbe30be]" name="Invalid_ac_id_cust_id" duration-ms="1198" started-at="2019-08-01T07:22:49Z" description="Invalid Account Id and Customer Id" finished-at="2019-08-01T07:22:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_ac_id_cust_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:zillow.ZillowTests@5dbe30be]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:50Z" finished-at="2019-08-01T07:22:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_ac_id_cust_id status=SUCCESS method=ZillowTests.Invalid_ac_id_cust_id()[pri:2, instance:zillow.ZillowTests@5dbe30be] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
      </class> <!-- zillow.ZillowTests -->
    </test> <!-- Zillow -->
    <test name="Plaid" duration-ms="138440" started-at="2019-08-01T07:22:50Z" finished-at="2019-08-01T07:25:09Z">
      <class name="plaid.PlaidTests">
        <test-method status="PASS" signature="getHostURL()[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="getHostURL" is-config="true" duration-ms="0" started-at="2019-08-01T07:22:50Z" finished-at="2019-08-01T07:22:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getHostURL -->
        <test-method status="PASS" signature="Valild_Plaid_Flow_with_all_parameters()[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="Valild_Plaid_Flow_with_all_parameters" duration-ms="46706" started-at="2019-08-01T07:22:50Z" description="Valild Plaid Flow with all parameters and submitting accounts from single bank" finished-at="2019-08-01T07:23:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valild_Plaid_Flow_with_all_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:23:37Z" finished-at="2019-08-01T07:23:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valild_Plaid_Flow_with_all_parameters status=SUCCESS method=PlaidTests.Valild_Plaid_Flow_with_all_parameters()[pri:0, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Valild_Plaid_Flow_with_only_mandatory_parameters()[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="Valild_Plaid_Flow_with_only_mandatory_parameters" duration-ms="62504" started-at="2019-08-01T07:23:37Z" description="Valild Plaid Flow with only mandatory parameters and submitting accounts from multiple banks" finished-at="2019-08-01T07:24:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Valild_Plaid_Flow_with_only_mandatory_parameters -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:40Z" finished-at="2019-08-01T07:24:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Valild_Plaid_Flow_with_only_mandatory_parameters status=SUCCESS method=PlaidTests.Valild_Plaid_Flow_with_only_mandatory_parameters()[pri:0, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="FAIL" signature="downloadReport(java.lang.String)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="downloadReport" duration-ms="0" started-at="2019-08-01T07:24:40Z" finished-at="2019-08-01T07:24:40Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Cannot inject @Test annotated Method [downloadReport] with [class java.lang.String].
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Cannot inject @Test annotated Method [downloadReport] with [class java.lang.String].
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection
at org.testng.internal.Parameters.checkParameterTypes(Parameters.java:407)
at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:356)
at org.testng.internal.Parameters.createParameters(Parameters.java:635)
at org.testng.internal.Parameters.handleParameters(Parameters.java:769)
at org.testng.internal.ParameterHandler.handleParameters(ParameterHandler.java:49)
at org.testng.internal.ParameterHandler.createParameters(ParameterHandler.java:37)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:923)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- downloadReport -->
        <test-method status="PASS" signature="Null_Address_line_1()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_Address_line_1" duration-ms="1296" started-at="2019-08-01T07:24:40Z" description="Null Zip Code" finished-at="2019-08-01T07:24:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Address_line_1 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:41Z" finished-at="2019-08-01T07:24:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Address_line_1 status=SUCCESS method=PlaidTests.Null_Address_line_1()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_First_Name()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_First_Name" duration-ms="1175" started-at="2019-08-01T07:24:41Z" description="Null First Name" finished-at="2019-08-01T07:24:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_First_Name -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:42Z" finished-at="2019-08-01T07:24:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_First_Name status=SUCCESS method=PlaidTests.Null_First_Name()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Last_Name()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_Last_Name" duration-ms="1184" started-at="2019-08-01T07:24:42Z" description="Null Last Name" finished-at="2019-08-01T07:24:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Last_Name -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:43Z" finished-at="2019-08-01T07:24:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Last_Name status=SUCCESS method=PlaidTests.Null_Last_Name()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_SSN()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_SSN" duration-ms="1218" started-at="2019-08-01T07:24:43Z" description="Null SSN" finished-at="2019-08-01T07:24:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_SSN -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:45Z" finished-at="2019-08-01T07:24:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_SSN status=SUCCESS method=PlaidTests.Null_SSN()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_Zip_Code()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_Zip_Code" duration-ms="1304" started-at="2019-08-01T07:24:45Z" description="Null Zip Code" finished-at="2019-08-01T07:24:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_Zip_Code -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:46Z" finished-at="2019-08-01T07:24:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_Zip_Code status=SUCCESS method=PlaidTests.Null_Zip_Code()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_account_id()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_account_id" duration-ms="1177" started-at="2019-08-01T07:24:46Z" description="Null Account Id" finished-at="2019-08-01T07:24:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_account_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:47Z" finished-at="2019-08-01T07:24:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_account_id status=SUCCESS method=PlaidTests.Null_account_id()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_cust_id_and_ac_id()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_cust_id_and_ac_id" duration-ms="1203" started-at="2019-08-01T07:24:47Z" description="Null Customer Id and Account Id" finished-at="2019-08-01T07:24:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_cust_id_and_ac_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:24:48Z" finished-at="2019-08-01T07:24:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_cust_id_and_ac_id status=SUCCESS method=PlaidTests.Null_cust_id_and_ac_id()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_customer_id()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_customer_id" duration-ms="1177" started-at="2019-08-01T07:24:48Z" description="Null Customer Id" finished-at="2019-08-01T07:24:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_customer_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:49Z" finished-at="2019-08-01T07:24:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_customer_id status=SUCCESS method=PlaidTests.Null_customer_id()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_email_address()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_email_address" duration-ms="1295" started-at="2019-08-01T07:24:49Z" description="Null email address" finished-at="2019-08-01T07:24:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_email_address -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:24:51Z" finished-at="2019-08-01T07:24:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_email_address status=SUCCESS method=PlaidTests.Null_email_address()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_first_name_last_name_ssn()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_first_name_last_name_ssn" duration-ms="1174" started-at="2019-08-01T07:24:51Z" description="Null first name, last name, ssn" finished-at="2019-08-01T07:24:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_first_name_last_name_ssn -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:52Z" finished-at="2019-08-01T07:24:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_first_name_last_name_ssn status=SUCCESS method=PlaidTests.Null_first_name_last_name_ssn()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Null_verification_type()[pri:1, instance:plaid.PlaidTests@7fd4acee]" name="Null_verification_type" duration-ms="1136" started-at="2019-08-01T07:24:52Z" description="Null Verification Type" finished-at="2019-08-01T07:24:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null_verification_type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:24:53Z" finished-at="2019-08-01T07:24:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Null_verification_type status=SUCCESS method=PlaidTests.Null_verification_type()[pri:1, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_Zip_Code()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_Zip_Code" duration-ms="1179" started-at="2019-08-01T07:24:53Z" description="Invalid Zip Code" finished-at="2019-08-01T07:24:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Zip_Code -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:54Z" finished-at="2019-08-01T07:24:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_Zip_Code status=SUCCESS method=PlaidTests.Invalid_Zip_Code()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_account_id()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_account_id" duration-ms="1275" started-at="2019-08-01T07:24:54Z" description="Invalid Account Id" finished-at="2019-08-01T07:24:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_account_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:55Z" finished-at="2019-08-01T07:24:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_account_id status=SUCCESS method=PlaidTests.Invalid_account_id()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_cust_id_ac_id()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_cust_id_ac_id" duration-ms="1252" started-at="2019-08-01T07:24:55Z" description="Invalid Customer Id and Account Id" finished-at="2019-08-01T07:24:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_cust_id_ac_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:24:57Z" finished-at="2019-08-01T07:24:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_cust_id_ac_id status=SUCCESS method=PlaidTests.Invalid_cust_id_ac_id()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_customer_id()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_customer_id" duration-ms="1260" started-at="2019-08-01T07:24:57Z" description="Invalid Customer Id" finished-at="2019-08-01T07:24:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_customer_id -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:58Z" finished-at="2019-08-01T07:24:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_customer_id status=SUCCESS method=PlaidTests.Invalid_customer_id()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address1()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_email_address1" duration-ms="1189" started-at="2019-08-01T07:24:58Z" description="Invalid email address1" finished-at="2019-08-01T07:24:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address1 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:24:59Z" finished-at="2019-08-01T07:24:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address1 status=SUCCESS method=PlaidTests.Invalid_email_address1()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address2()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_email_address2" duration-ms="1138" started-at="2019-08-01T07:24:59Z" description="Invalid email address2" finished-at="2019-08-01T07:25:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address2 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:25:00Z" finished-at="2019-08-01T07:25:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address2 status=SUCCESS method=PlaidTests.Invalid_email_address2()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address3()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_email_address3" duration-ms="1145" started-at="2019-08-01T07:25:00Z" description="Invalid email address3" finished-at="2019-08-01T07:25:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address3 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:25:01Z" finished-at="2019-08-01T07:25:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address3 status=SUCCESS method=PlaidTests.Invalid_email_address3()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address4()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_email_address4" duration-ms="1247" started-at="2019-08-01T07:25:01Z" description="Invalid email address4" finished-at="2019-08-01T07:25:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address4 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:25:03Z" finished-at="2019-08-01T07:25:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address4 status=SUCCESS method=PlaidTests.Invalid_email_address4()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_email_address5()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_email_address5" duration-ms="1178" started-at="2019-08-01T07:25:03Z" description="Invalid email address5" finished-at="2019-08-01T07:25:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_email_address5 -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:25:04Z" finished-at="2019-08-01T07:25:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_email_address5 status=SUCCESS method=PlaidTests.Invalid_email_address5()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="Invalid_verification_type()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="Invalid_verification_type" duration-ms="1263" started-at="2019-08-01T07:25:04Z" description="Invalid verification_type" finished-at="2019-08-01T07:25:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_verification_type -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="0" started-at="2019-08-01T07:25:05Z" finished-at="2019-08-01T07:25:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Invalid_verification_type status=SUCCESS method=PlaidTests.Invalid_verification_type()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="SSN_greater_than_9_digits()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="SSN_greater_than_9_digits" duration-ms="1216" started-at="2019-08-01T07:25:05Z" description="SSN greater than 9 digits" finished-at="2019-08-01T07:25:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SSN_greater_than_9_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:25:06Z" finished-at="2019-08-01T07:25:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SSN_greater_than_9_digits status=SUCCESS method=PlaidTests.SSN_greater_than_9_digits()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="SSN_less_than_9_digits()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="SSN_less_than_9_digits" duration-ms="1198" started-at="2019-08-01T07:25:06Z" description="SSN less than 9 digits" finished-at="2019-08-01T07:25:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SSN_less_than_9_digits -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="1" started-at="2019-08-01T07:25:08Z" finished-at="2019-08-01T07:25:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SSN_less_than_9_digits status=SUCCESS method=PlaidTests.SSN_less_than_9_digits()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
        <test-method status="PASS" signature="zip_code_less_than_5_digits_ssn_less_than_9_null_first_and_last_name_invalid_email()[pri:2, instance:plaid.PlaidTests@7fd4acee]" name="zip_code_less_than_5_digits_ssn_less_than_9_null_first_and_last_name_invalid_email" duration-ms="1240" started-at="2019-08-01T07:25:08Z" description="Invalid Zip Code, SSN, Email, Null first and last name" finished-at="2019-08-01T07:25:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zip_code_less_than_5_digits_ssn_less_than_9_null_first_and_last_name_invalid_email -->
        <test-method status="PASS" signature="checkStatus(org.testng.ITestResult)[pri:0, instance:plaid.PlaidTests@7fd4acee]" name="checkStatus" is-config="true" duration-ms="6" started-at="2019-08-01T07:25:09Z" finished-at="2019-08-01T07:25:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=zip_code_less_than_5_digits_ssn_less_than_9_null_first_and_last_name_invalid_email status=SUCCESS method=PlaidTests.zip_code_less_than_5_digits_ssn_less_than_9_null_first_and_last_name_invalid_email()[pri:2, instance:plaid.PlaidTests@7fd4acee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkStatus -->
      </class> <!-- plaid.PlaidTests -->
    </test> <!-- Plaid -->
    <test name="PPE_HELOC" duration-ms="9229" started-at="2019-08-01T07:25:09Z" finished-at="2019-08-01T07:25:18Z">
      <class name="ppe.PPE_OB_Tests">
        <test-method status="PASS" signature="getHostURL()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="getHostURL" is-config="true" duration-ms="1" started-at="2019-08-01T07:25:09Z" finished-at="2019-08-01T07:25:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getHostURL -->
        <test-method status="PASS" signature="FHA_Investment_house_good_fico_of_15_Variable_for_Half_Duplex()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Investment_house_good_fico_of_15_Variable_for_Half_Duplex" duration-ms="2277" started-at="2019-08-01T07:25:09Z" description="FHA_Investment_house_good_fico_of_15_Variable_for_Half_Duplex" finished-at="2019-08-01T07:25:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Investment_house_good_fico_of_15_Variable_for_Half_Duplex -->
        <test-method status="PASS" signature="FHA_Primary_house_excellent_fico_of_15_Fixed_for_Parking_Stall()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Primary_house_excellent_fico_of_15_Fixed_for_Parking_Stall" duration-ms="2330" started-at="2019-08-01T07:25:09Z" description="FHA_Primary_house_excellent_fico_of_15_Fixed_for_Parking_Stall" finished-at="2019-08-01T07:25:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Primary_house_excellent_fico_of_15_Fixed_for_Parking_Stall -->
        <test-method status="PASS" signature="FHA_Primary_house_fair_fico_of_30_Fixed_for_Detached_Condominium()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Primary_house_fair_fico_of_30_Fixed_for_Detached_Condominium" duration-ms="2381" started-at="2019-08-01T07:25:09Z" description="FHA_Primary_house_fair_fico_of_30_Fixed_for_Detached_Condominium" finished-at="2019-08-01T07:25:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Primary_house_fair_fico_of_30_Fixed_for_Detached_Condominium -->
        <test-method status="PASS" signature="FHA_Primary_house_good_fico_of_15_30_Fixed_Variable_for_Single_family()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Primary_house_good_fico_of_15_30_Fixed_Variable_for_Single_family" duration-ms="2274" started-at="2019-08-01T07:25:09Z" description="FHA_Primary_house_good_fico_of_15_30_Fixed_Variable_for_Single_family" finished-at="2019-08-01T07:25:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Primary_house_good_fico_of_15_30_Fixed_Variable_for_Single_family -->
        <test-method status="PASS" signature="FHA_Primary_house_good_fico_of_30_Fixed_for_Duplex_Up_And_Down()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Primary_house_good_fico_of_30_Fixed_for_Duplex_Up_And_Down" duration-ms="2285" started-at="2019-08-01T07:25:09Z" description="FHA_Primary_house_good_fico_of_30_Fixed_for_Duplex_Up_And_Down" finished-at="2019-08-01T07:25:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Primary_house_good_fico_of_30_Fixed_for_Duplex_Up_And_Down -->
        <test-method status="PASS" signature="FHA_Primary_house_good_fico_of_30_Variable_for_Duplex_Side_By_Side()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Primary_house_good_fico_of_30_Variable_for_Duplex_Side_By_Side" duration-ms="2040" started-at="2019-08-01T07:25:11Z" description="FHA_Primary_house_good_fico_of_30_Variable_for_Duplex_Side_By_Side" finished-at="2019-08-01T07:25:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Primary_house_good_fico_of_30_Variable_for_Duplex_Side_By_Side -->
        <test-method status="PASS" signature="FHA_Secondary_house_good_fico_of_15_30_Fixed_Variable_for_Townhouse()[pri:0, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Secondary_house_good_fico_of_15_30_Fixed_Variable_for_Townhouse" duration-ms="2055" started-at="2019-08-01T07:25:11Z" description="FHA_Secondary_house_good_fico_of_15_30_Fixed_Variable_for_Townhouse" finished-at="2019-08-01T07:25:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Secondary_house_good_fico_of_15_30_Fixed_Variable_for_Townhouse -->
        <test-method status="PASS" signature="Equal_Cash_and_Mortgage_Amount()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Equal_Cash_and_Mortgage_Amount" duration-ms="2032" started-at="2019-08-01T07:25:13Z" description="Equal_Cash_and_Mortgage_Amount" finished-at="2019-08-01T07:25:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Equal_Cash_and_Mortgage_Amount -->
        <test-method status="PASS" signature="Cash_Amount_less_than_25000()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Cash_Amount_less_than_25000" duration-ms="2048" started-at="2019-08-01T07:25:13Z" description="Cash_Amount_less_than_25000" finished-at="2019-08-01T07:25:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Cash_Amount_less_than_25000 -->
        <test-method status="PASS" signature="Invalid_Account_Id()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Account_Id" duration-ms="1447" started-at="2019-08-01T07:25:13Z" description="Invalid_Account_Id" finished-at="2019-08-01T07:25:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Account_Id -->
        <test-method status="PASS" signature="FHA_Empty_Mortgage_Balance()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="FHA_Empty_Mortgage_Balance" duration-ms="1406" started-at="2019-08-01T07:25:13Z" description="FHA_Empty_Mortgage_Balance" finished-at="2019-08-01T07:25:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FHA_Empty_Mortgage_Balance -->
        <test-method status="PASS" signature="Invalid_Adjustable_Rate_Terms()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Adjustable_Rate_Terms" duration-ms="1441" started-at="2019-08-01T07:25:13Z" description="Invalid_Adjustable_Rate_Terms" finished-at="2019-08-01T07:25:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Adjustable_Rate_Terms -->
        <test-method status="PASS" signature="Invalid_Current_Property_Value()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Current_Property_Value" duration-ms="1356" started-at="2019-08-01T07:25:15Z" description="Invalid_Current_Property_Value" finished-at="2019-08-01T07:25:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Current_Property_Value -->
        <test-method status="PASS" signature="Invalid_Customer_Id()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Customer_Id" duration-ms="1496" started-at="2019-08-01T07:25:15Z" description="Invalid_Customer_Id" finished-at="2019-08-01T07:25:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Customer_Id -->
        <test-method status="PASS" signature="Invalid_Fico_Score()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Fico_Score" duration-ms="1391" started-at="2019-08-01T07:25:15Z" description="Invalid_Fico_Score" finished-at="2019-08-01T07:25:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Fico_Score -->
        <test-method status="PASS" signature="Invalid_Loan_Amortization()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Loan_Amortization" duration-ms="1414" started-at="2019-08-01T07:25:15Z" description="Invalid_Loan_Amortization" finished-at="2019-08-01T07:25:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Loan_Amortization -->
        <test-method status="PASS" signature="Invalid_Loan_Types()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Loan_Types" duration-ms="1468" started-at="2019-08-01T07:25:15Z" description="Invalid_Loan_Types" finished-at="2019-08-01T07:25:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Loan_Types -->
        <test-method status="PASS" signature="Invalid_Mortgage_balance()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Mortgage_balance" duration-ms="1953" started-at="2019-08-01T07:25:16Z" description="Invalid_Mortgage_balance" finished-at="2019-08-01T07:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Mortgage_balance -->
        <test-method status="PASS" signature="Invalid_Property_Type()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Property_Type" duration-ms="1425" started-at="2019-08-01T07:25:16Z" description="Invalid_Property_Type" finished-at="2019-08-01T07:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Property_Type -->
        <test-method status="PASS" signature="Invalid_Zip_Code()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_Zip_Code" duration-ms="1363" started-at="2019-08-01T07:25:16Z" description="Invalid_Zip_Code" finished-at="2019-08-01T07:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_Zip_Code -->
        <test-method status="PASS" signature="Invalid_loan_purpose()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Invalid_loan_purpose" duration-ms="1355" started-at="2019-08-01T07:25:17Z" description="Invalid_loan_purpose" finished-at="2019-08-01T07:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Invalid_loan_purpose -->
        <test-method status="PASS" signature="Property_Value_Less_Than_Cash_Amount()[pri:1, instance:ppe.PPE_OB_Tests@76c7beb3]" name="Property_Value_Less_Than_Cash_Amount" duration-ms="1355" started-at="2019-08-01T07:25:17Z" description="Property_Value_Less_Than_Cash_Amount" finished-at="2019-08-01T07:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Property_Value_Less_Than_Cash_Amount -->
      </class> <!-- ppe.PPE_OB_Tests -->
    </test> <!-- PPE_HELOC -->
    <test name="RcoreTest" duration-ms="40185" started-at="2019-08-01T07:25:18Z" finished-at="2019-08-01T07:25:59Z">
      <class name="rCore.RCoreTests">
        <test-method status="PASS" signature="getData()[pri:0, instance:rCore.RCoreTests@52500920]" name="getData" is-config="true" duration-ms="3" started-at="2019-08-01T07:25:18Z" finished-at="2019-08-01T07:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getData -->
        <test-method status="PASS" signature="createLoanApplication()[pri:0, instance:rCore.RCoreTests@52500920]" name="createLoanApplication" duration-ms="4177" started-at="2019-08-01T07:25:18Z" finished-at="2019-08-01T07:25:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createLoanApplication -->
        <test-method status="PASS" signature="createTask()[pri:0, instance:rCore.RCoreTests@52500920]" name="createTask" duration-ms="1407" started-at="2019-08-01T07:25:23Z" finished-at="2019-08-01T07:25:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createTask -->
        <test-method status="PASS" signature="getLoanDetails()[pri:0, instance:rCore.RCoreTests@52500920]" name="getLoanDetails" duration-ms="1353" started-at="2019-08-01T07:25:24Z" finished-at="2019-08-01T07:25:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLoanDetails -->
        <test-method status="PASS" signature="getTaskList()[pri:0, instance:rCore.RCoreTests@52500920]" name="getTaskList" duration-ms="1263" started-at="2019-08-01T07:25:25Z" finished-at="2019-08-01T07:25:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTaskList -->
        <test-method status="PASS" signature="retrieveTask()[pri:1, instance:rCore.RCoreTests@52500920]" name="retrieveTask" duration-ms="1248" started-at="2019-08-01T07:25:27Z" finished-at="2019-08-01T07:25:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveTask -->
        <test-method status="PASS" signature="updateTask()[pri:1, instance:rCore.RCoreTests@52500920]" name="updateTask" duration-ms="1251" started-at="2019-08-01T07:25:28Z" finished-at="2019-08-01T07:25:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTask -->
        <test-method status="PASS" signature="uploadDocument()[pri:2, instance:rCore.RCoreTests@52500920]" name="uploadDocument" duration-ms="5783" started-at="2019-08-01T07:25:29Z" finished-at="2019-08-01T07:25:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- uploadDocument -->
        <test-method status="PASS" signature="retrieveDocument()[pri:3, instance:rCore.RCoreTests@52500920]" name="retrieveDocument" duration-ms="1292" started-at="2019-08-01T07:25:35Z" finished-at="2019-08-01T07:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveDocument -->
        <test-method status="PASS" signature="downloadDocument()[pri:4, instance:rCore.RCoreTests@52500920]" name="downloadDocument" duration-ms="2938" started-at="2019-08-01T07:25:36Z" finished-at="2019-08-01T07:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- downloadDocument -->
        <test-method status="PASS" signature="createMessage()[pri:5, instance:rCore.RCoreTests@52500920]" name="createMessage" duration-ms="1296" started-at="2019-08-01T07:25:39Z" finished-at="2019-08-01T07:25:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createMessage -->
        <test-method status="PASS" signature="getMessageList()[pri:5, instance:rCore.RCoreTests@52500920]" name="getMessageList" duration-ms="1896" started-at="2019-08-01T07:25:40Z" finished-at="2019-08-01T07:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMessageList -->
        <test-method status="PASS" signature="getAccountList()[pri:6, instance:rCore.RCoreTests@52500920]" name="getAccountList" duration-ms="1420" started-at="2019-08-01T07:25:42Z" finished-at="2019-08-01T07:25:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAccountList -->
        <test-method status="PASS" signature="retrieveAccount()[pri:6, instance:rCore.RCoreTests@52500920]" name="retrieveAccount" duration-ms="1245" started-at="2019-08-01T07:25:44Z" finished-at="2019-08-01T07:25:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveAccount -->
        <test-method status="PASS" signature="retrieveService()[pri:6, instance:rCore.RCoreTests@52500920]" name="retrieveService" duration-ms="1206" started-at="2019-08-01T07:25:45Z" finished-at="2019-08-01T07:25:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveService -->
        <test-method status="PASS" signature="createUser_Lender()[pri:7, instance:rCore.RCoreTests@52500920]" name="createUser_Lender" duration-ms="1499" started-at="2019-08-01T07:25:46Z" finished-at="2019-08-01T07:25:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser_Lender -->
        <test-method status="PASS" signature="getUserList()[pri:7, instance:rCore.RCoreTests@52500920]" name="getUserList" duration-ms="2025" started-at="2019-08-01T07:25:48Z" finished-at="2019-08-01T07:25:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserList -->
        <test-method status="PASS" signature="retrieveUser_Lender()[pri:7, instance:rCore.RCoreTests@52500920]" name="retrieveUser_Lender" duration-ms="1222" started-at="2019-08-01T07:25:50Z" finished-at="2019-08-01T07:25:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveUser_Lender -->
        <test-method status="PASS" signature="deactivate_User()[pri:8, instance:rCore.RCoreTests@52500920]" name="deactivate_User" duration-ms="1229" started-at="2019-08-01T07:25:51Z" finished-at="2019-08-01T07:25:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deactivate_User -->
        <test-method status="PASS" signature="activate_User()[pri:9, instance:rCore.RCoreTests@52500920]" name="activate_User" duration-ms="1234" started-at="2019-08-01T07:25:52Z" finished-at="2019-08-01T07:25:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activate_User -->
        <test-method status="PASS" signature="updateUser_Lender()[pri:9, instance:rCore.RCoreTests@52500920]" name="updateUser_Lender" duration-ms="1365" started-at="2019-08-01T07:25:53Z" finished-at="2019-08-01T07:25:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateUser_Lender -->
        <test-method status="PASS" signature="update_User_Secondary_Accounts()[pri:10, instance:rCore.RCoreTests@52500920]" name="update_User_Secondary_Accounts" duration-ms="1346" started-at="2019-08-01T07:25:55Z" finished-at="2019-08-01T07:25:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- update_User_Secondary_Accounts -->
        <test-method status="PASS" signature="createAccess_control_group()[pri:11, instance:rCore.RCoreTests@52500920]" name="createAccess_control_group" duration-ms="1233" started-at="2019-08-01T07:25:56Z" finished-at="2019-08-01T07:25:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccess_control_group -->
        <test-method status="PASS" signature="updateAccess_control_group()[pri:11, instance:rCore.RCoreTests@52500920]" name="updateAccess_control_group" duration-ms="1214" started-at="2019-08-01T07:25:57Z" finished-at="2019-08-01T07:25:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateAccess_control_group -->
      </class> <!-- rCore.RCoreTests -->
    </test> <!-- RcoreTest -->
  </suite> <!-- All Test Suite -->
</testng-results>
